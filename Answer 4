def bubble_sort(input_list):
    n = len(input_list)
    
    # Traverse through all array elements
    for i in range(n):
        # Last i elements are already in place
        for j in range(0, n - i - 1):
            # Swap adjacent elements if they are in the wrong order
            if input_list[j] > input_list[j + 1]:
                input_list[j], input_list[j + 1] = input_list[j + 1], input_list[j]

# Input list of integers from the keyboard
input_list = input("Enter a list of integers (space-separated): ").split()
input_list = [int(num) for num in input_list]

# Sort the list using bubble sort
bubble_sort(input_list)

# Print the sorted list
print("Sorted list:", input_list)

# Test cases 
# 1. Empty input list
# 2. List with one element eg- 65
# 3. List with duplicate elements eg- 23 23 23 345 56 98 98
# 4. Already sorted list eg- 23 45 56 67 89 
# 5. Negative numbers as input eg- 5 -9 -7 43 76 -98
# 6. Already in descending order eg- 98 87 76 54 43 
# 7. Large input list

# Automation of test cases 


import unittest


class SortingTestCase(unittest.TestCase):
    def test_sorting(self):
        # Test Case 1: Basic Test Case
        input_list = [4, 2, 7, 1, 5]
        expected_output = [1, 2, 4, 5, 7]
        self.assertListEqual(bubble_sort(input_list.copy()), expected_output)

        # Test Case 2: Empty List
        input_list = []
        expected_output = []
        self.assertListEqual(bubble_sort(input_list.copy()), expected_output)

        # Test Case 3: List with One Element
        input_list = [42]
        expected_output = [42]
        self.assertListEqual(bubble_sort(input_list.copy()), expected_output)

        # Test Case 4: List with Duplicate Elements
        input_list = [5, 3, 7, 3, 2, 5, 2]
        expected_output = [2, 2, 3, 3, 5, 5, 7]
        self.assertListEqual(bubble_sort(input_list.copy()), expected_output)

        # Test Case 5: Already Sorted List
        input_list = [1, 2, 3, 4, 5]
        expected_output = [1, 2, 3, 4, 5]
        self.assertListEqual(bubble_sort(input_list.copy()), expected_output)

        # Test Case 6: Negative Numbers
        input_list = [5, -2, 3, -7, 0, -1]
        expected_output = [-7, -2, -1, 0, 3, 5]
        self.assertListEqual(bubble_sort(input_list.copy()), expected_output)

        # Test Case 7: Large List
        input_list = list(range(1000, 0, -1))
        expected_output = list(range(1, 1001))
        self.assertListEqual(bubble_sort(input_list.copy()), expected_output)


if __name__ == '__main__':
    unittest.main()

